<?php

namespace App\Http\Controllers;

use App\Models\car;
use App\Models\categorie;
use App\Models\reservation;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;

class AdminController extends Controller
{
    public function index()
    {

        $user = Auth::user();
        // Get all cars
        $cars = Car::all();
    
        // Prepare an array to store statistics for each car
        $carStatistics = [];
    
        // Iterate over each car
        foreach ($cars as $car) {
            // Calculate the number of reservations for the car
            $reservationCount = Reservation::where('car_id', $car->id)->count();
    
            // Calculate the total revenue generated by the car
            $totalRevenue = Reservation::where('car_id', $car->id)->sum('prixTTC');
    
            // Store the statistics in the array
            $carStatistics[$car->id] = [
                'car' => $car,
                'reservationCount' => $reservationCount,
                'totalRevenue' => $totalRevenue,
            ];
        }
    
            $userStats = $this->getUserStats();
            $reservationStats = $this->getReservationStats();
            $reservationCounts = $this->getTotalReservations();
            $totalCars = $this->getTotalCars(); 
            $TotalCategorie = $this->getTotalCategorie(); 
    
            return view('admin.index', compact('carStatistics','cars', 'userStats', 'reservationStats','user','reservationCounts','totalCars','TotalCategorie'));
    }
    
     
        private function getUserStats()
        {
            $activeUsers = User::whereNotNull('email_verified_at')->whereMonth('created_at', Carbon::now()->month)->count();
            return $activeUsers;
        }
    
    
    private function getReservationStats()
    {
        $currentYear = date('Y');
        $currentMonth = date('m');
    
        $reservations = Reservation::selectRaw('YEAR(dateL) as year, MONTH(dateL) as month, SUM(prixTTC) as totalPrice')
            ->where(function ($query) use ($currentYear, $currentMonth) {
                $query->whereRaw('YEAR(dateL) > ?', [$currentYear])
                    ->orWhere(function ($query) use ($currentYear, $currentMonth) {
                        $query->whereRaw('YEAR(dateL) = ? AND MONTH(dateL) >= ?', [$currentYear, $currentMonth]);
                    });
            })
            ->groupBy('year', 'month')
            ->get();
    
        return $reservations;
    
        return $reservations;
    }
    
    
    private function getTotalReservations()
    {
        $totalReservations = Reservation::count();
        return $totalReservations;
    }
    
    private function getTotalCars()
    {
        $totalCars = Car::count();
        return $totalCars;
    }

    private function getTotalCategorie()
    {
        $totalcategorie = categorie::count();
        return $totalcategorie;
    }
    
    


    public function profile()
    {

         $user = Auth::user();

        return view('admin.profileA', compact('user'));
    }



    public function updateProfile(Request $request)
    {
        // $user = User::findOrFail($id);
        $user = Auth::user();
        $data = $request->all();
        
        if ($request->hasFile('photo')) {
            // Delete the old profile photo from the 'public' disk
            Storage::disk('public')->delete($user->path);
        
            // Store the new profile photo on the 'abdo' disk
            $image = $request->file('photo')->getClientOriginalName();
            $path = $request->file('photo')->storeAs('users', $image, 'abdo');
            $data['path'] = $path;
        }
        
        $data['password'] = $user->password;
        if ($request->filled('password')) {
            if ($request->input('password') !== $user->password) {
                $data['password'] = Hash::make($request->input('password'));
            }
        }
        
        $user->update($data);
        
        return redirect()->route('admin.profile', $user->id);
    }

    public function users()
    {
        $user = Auth::user();
        $users = User::orderBy('created_at', 'desc')->get();
        // $user = User::findOrFail($id);

        return view('admin.users', compact('users','user'));
    }

    //function de statstic 

    public function cars()
    {
        $categories= categorie::all();
        $cars = car::orderBy('created_at', 'desc')->paginate(5);
        // $user = User::findOrFail($id);
         $user = Auth::user();
        return view('admin.cars', compact('cars', 'user','categories'));
    }

    public function Reservation()
    {
        $user = Auth::user(); 
        $users = user::all();

    

        $reservations = reservation::paginate(5);
    
        return view('admin.reservation', compact('reservations','user'));
    }

    public function destroy($id){

        $reservation = Reservation::findOrFail($id);
        $reservation->delete();
    
        // Mettre à jour la disponibilité de la voiture
        $car = Car::findOrFail($reservation->car_id);
        $car->disponible = 1;
        $car->save();

        return redirect()->back()->with('success','La réservation a été supprimée avec succès.');
    }
}
